//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TerrariaMapTool.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TerrariaMapTool.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Add {
            get {
                object obj = ResourceManager.GetObject("Add", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt; 
        ///&lt;html&gt; 
        ///	&lt;head&gt;
        ///		&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, user-scalable=no&quot; /&gt; 
        ///		&lt;style type=&quot;text/css&quot;&gt; 
        ///			html { height: 100% } 
        ///			body { height: 100%; margin: 0px; padding: 0px } 
        ///			#map_canvas { height: 100% } 
        ///		&lt;/style&gt; 
        ///
        ///		&lt;script type=&quot;text/javascript&quot; src=&quot;http://maps.google.com/maps/api/js?sensor=false&quot;&gt;&lt;/script&gt;
        ///		&lt;script type=&quot;text/javascript&quot; src=&quot;util.js&quot; &gt;&lt;/script&gt;
        ///		&lt;script type=&quot;text/javascript&quot; src=&quot;terraria.js&quot;&gt;&lt;/script&gt; 
        ///	&lt;/head&gt; 
        ///	&lt;body onload=&quot;initialize( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Map {
            get {
                return ResourceManager.GetString("Map", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Remove {
            get {
                object obj = ResourceManager.GetObject("Remove", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 			///////////////////////////////////////////////////////////////////
        ///			///
        ///			/// The icon set
        ///			///
        ///			/// You can customize your own icon set here
        ///			///
        ///			///////////////////////////////////////////////////////////////////
        ///			
        ///			var MapIcons = 
        ///			{ 
        ///				Spawn : &apos;http://maps.gstatic.com/mapfiles/ms2/micons/blue.png&apos;,
        ///				Chest: &apos;http://maps.gstatic.com/mapfiles/ms2/micons/green.png&apos;,
        ///				HeartContainer: &apos;http://maps.gstatic.com/mapfiles/ms2/micons/red.png&apos;,
        ///				Anvil	: &apos;http://maps.gstatic.com/mapf [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Terraria {
            get {
                return ResourceManager.GetString("Terraria", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        ///* From http://gmaps-samples-v3.googlecode.com
        ///*
        ///* Returns an XMLHttp instance to use for asynchronous
        ///* downloading. This method will never throw an exception, but will
        ///* return NULL if the browser does not support XmlHttp for any reason.
        ///* @return {XMLHttpRequest|Null}
        ///*/
        ///function createXmlHttpRequest() {
        /// try {
        ///   if (typeof ActiveXObject != &apos;undefined&apos;) {
        ///     return new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);
        ///   } else if (window[&quot;XMLHttpRequest&quot;]) {
        ///     return new XMLHttpRequest();
        ///   }
        /// } catch (e) { [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Utilities {
            get {
                return ResourceManager.GetString("Utilities", resourceCulture);
            }
        }
    }
}
